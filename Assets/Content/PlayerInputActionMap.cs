//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Content/PlayerInputActionMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActionMap : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActionMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActionMap"",
    ""maps"": [
        {
            ""name"": ""PC"",
            ""id"": ""3779ab6d-6fe2-42e4-8d99-1f6533808acb"",
            ""actions"": [
                {
                    ""name"": ""XRotation"",
                    ""type"": ""Value"",
                    ""id"": ""a812efc1-6acd-4b76-aea1-c64fe79ed828"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""YRotation"",
                    ""type"": ""Value"",
                    ""id"": ""7eb2e6c7-483f-42bc-b38e-ff425195556e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveForward"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5e73ca59-442f-4265-8fad-097ab8f36d38"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2fa9eaba-15c5-43a3-bbc0-c6943fe69c82"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""XRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ffae0c6-8c6c-49d4-816d-6cda4586d765"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""YRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""25d104aa-a445-4f06-a219-c5ee307a9b80"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForward"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""16dbeabe-1c46-4b52-bb53-2ed2a4a9cec5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""MoveForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""922e7389-fc76-48d5-a342-32b4611f4c62"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""MoveForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3927dc63-faba-4f01-a6d8-004e4ac6c0ac"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""MoveForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4076928a-eb17-4a75-a58a-565680d2ff8d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""MoveForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PC
        m_PC = asset.FindActionMap("PC", throwIfNotFound: true);
        m_PC_XRotation = m_PC.FindAction("XRotation", throwIfNotFound: true);
        m_PC_YRotation = m_PC.FindAction("YRotation", throwIfNotFound: true);
        m_PC_MoveForward = m_PC.FindAction("MoveForward", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PC
    private readonly InputActionMap m_PC;
    private IPCActions m_PCActionsCallbackInterface;
    private readonly InputAction m_PC_XRotation;
    private readonly InputAction m_PC_YRotation;
    private readonly InputAction m_PC_MoveForward;
    public struct PCActions
    {
        private @PlayerInputActionMap m_Wrapper;
        public PCActions(@PlayerInputActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @XRotation => m_Wrapper.m_PC_XRotation;
        public InputAction @YRotation => m_Wrapper.m_PC_YRotation;
        public InputAction @MoveForward => m_Wrapper.m_PC_MoveForward;
        public InputActionMap Get() { return m_Wrapper.m_PC; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PCActions set) { return set.Get(); }
        public void SetCallbacks(IPCActions instance)
        {
            if (m_Wrapper.m_PCActionsCallbackInterface != null)
            {
                @XRotation.started -= m_Wrapper.m_PCActionsCallbackInterface.OnXRotation;
                @XRotation.performed -= m_Wrapper.m_PCActionsCallbackInterface.OnXRotation;
                @XRotation.canceled -= m_Wrapper.m_PCActionsCallbackInterface.OnXRotation;
                @YRotation.started -= m_Wrapper.m_PCActionsCallbackInterface.OnYRotation;
                @YRotation.performed -= m_Wrapper.m_PCActionsCallbackInterface.OnYRotation;
                @YRotation.canceled -= m_Wrapper.m_PCActionsCallbackInterface.OnYRotation;
                @MoveForward.started -= m_Wrapper.m_PCActionsCallbackInterface.OnMoveForward;
                @MoveForward.performed -= m_Wrapper.m_PCActionsCallbackInterface.OnMoveForward;
                @MoveForward.canceled -= m_Wrapper.m_PCActionsCallbackInterface.OnMoveForward;
            }
            m_Wrapper.m_PCActionsCallbackInterface = instance;
            if (instance != null)
            {
                @XRotation.started += instance.OnXRotation;
                @XRotation.performed += instance.OnXRotation;
                @XRotation.canceled += instance.OnXRotation;
                @YRotation.started += instance.OnYRotation;
                @YRotation.performed += instance.OnYRotation;
                @YRotation.canceled += instance.OnYRotation;
                @MoveForward.started += instance.OnMoveForward;
                @MoveForward.performed += instance.OnMoveForward;
                @MoveForward.canceled += instance.OnMoveForward;
            }
        }
    }
    public PCActions @PC => new PCActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    public interface IPCActions
    {
        void OnXRotation(InputAction.CallbackContext context);
        void OnYRotation(InputAction.CallbackContext context);
        void OnMoveForward(InputAction.CallbackContext context);
    }
}
